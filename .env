###############################################################################
#                          PROJECT / NETWORK / TIME                           #
###############################################################################
PROJECT_NAME=wt-docker
COMPOSE_PROJECT_NAME=wt-docker
NETWORK_NAME=wt-net
TZ=Europe/Moscow

###############################################################################
#                               NGINX / CERTS                                 #
###############################################################################
IMAGE_NGINX=nginx:1.25-alpine
# Каталог с сертификатами, монтируется внутрь контейнера Nginx как /etc/nginx/certs
WT_CERTS_DIR=./certs/wt

# Общий сертификат (удобно для dev; для prod можно разнести по доменам ниже)
NGINX_CERT_WT_CRT=wt+2.pem
NGINX_CERT_WT_KEY=wt+2-key.pem

###############################################################################
#                           NGINX HOSTS / PUBLIC PORTS                        #
###############################################################################
# Внешние DNS-имена (совпадают с сертификатами)
PUBLIC_FQDN__WEB=wt.local
PUBLIC_FQDN__VCLASS_MEDIA=wt-vclass.local
PUBLIC_FQDN__VCLASS_RECORDER=wt-recorder.local


# Порты, которые слушает Nginx на хосте 
# (80/443 — по умолчанию; 81 — для доступа к worker)
NGINX_WT_PORT_HTTP__WORKER=81          # локальный HTTP-доступ до worker через Nginx (удобно для dev)

###############################################################################
#                      UPSTREAMS (ВНУТРИ — ТОЛЬКО HTTP)                       #
###############################################################################
# Основной WebSoft HCM (до 4 нод). Для dev — имена docker-сервисов; для prod — FQDN/IP.
UPSTREAM_HOST_NAME__WEB_1=web-backend-1
UPSTREAM_HOST_PORT__WEB_1=8011
UPSTREAM_HOST_NAME__WEB_2=web-backend-2
UPSTREAM_HOST_PORT__WEB_2=8011

# Worker (обычно одна нода)
UPSTREAM_HOST_NAME__WORKER=worker-backend
UPSTREAM_HOST_PORT__WORKER=8011

###############################################################################
#                       NGINX — ПОВЕДЕНИЕ/ОПТИМИЗАЦИЯ                         #
###############################################################################

# resolver DNS для FQDN (Docker: 127.0.0.11).
NGINX_RESOLVER=127.0.0.11

# Балансировка web-бекенда: round_robin (по умолчанию в nginx), least_conn, ip_hash
NGINX_UPSTREAM_STRATEGY__WEB=least_conn

# Тонкая настройка по апстримам 
NGINX_UPSTREAM_KEEPALIVE__WEB=32
NGINX_UPSTREAM_KEEPALIVE__WORKER=32
NGINX_UPSTREAM_KEEPALIVE__VCLASS=32
NGINX_UPSTREAM_KEEPALIVE__RECORDER=32

# Пассивные health‑checks для членов upstream
NGINX_UPSTREAM_MAX_FAILS=5
NGINX_UPSTREAM_FAIL_TIMEOUT=30s

# Таймауты/буферы обратного прокси
NGINX_PROXY_READ_TIMEOUT=3600s
NGINX_PROXY_SEND_TIMEOUT=3600s
NGINX_PROXY_CONNECT_TIMEOUT=10s
NGINX_PROXY_BUFFERING=off

# Gzip
NGINX_ENABLE_GZIP=on

# HSTS (включать в prod, когда действительно весь трафик — только по HTTPS)
NGINX_HSTS_MAX_AGE=31536000

###############################################################################
#                                  POSTGRESQL                                 #
###############################################################################
IMAGE_POSTGRES=postgres:16
HOST_NAME__PG=postgres
HOST_PORT__PG=5432
DB_NAME__PG=wt
DB_USER__PG=wt
DB_PASSWORD__PG=wt_password                         # либо DB_PASSWORD__PG_FILE=/run/secrets/DB_PASSWORD__PG

PG_WAIT_ENABLED=true
PG_WAIT_DEADLINE=60
PG_WAIT_INTERVAL=2
PG_WAIT_ON_TIMEOUT=fail

###############################################################################
#                                    REDIS                                    #
###############################################################################
IMAGE_REDIS=redis:7.2-alpine
HOST_NAME__REDIS=redis
HOST_PORT__REDIS=6379
PASSWORD__REDIS=super_secret_password
OPTS__REDIS=abortConnect=false, allowAdmin=true, connectTimeout=5000, keepAlive=10, syncTimeout=1000


###############################################################################
#                               WEBSoft / LOGS / VFS                          #
###############################################################################
IMAGE_WT=websoft/hcm:2025.2.1225

# Логи: поведение
LOG_MIN_CHECK_INTERVAL=5
LOG_CONSOLIDATION=true
LOG_CONSOLIDATE_CHECK_INTERVAL=60
LOG_FULL_CONSOLIDATION=true

VFS_LOOK_ON_LOCAL=true
VFS_FETCH_BACK=true
VFS_DELETE_LOCAL_AFTER_FETCH=false

###############################################################################
#                   Websoft HCM spxml_unibridge_config.xml                    #
###############################################################################
# Redis cache
SPXML_CONF_REDIS_MAXMEMORY_ITEM_BYTES=338860800

# ==== SPXML (WEB role) ====
SPXML_CONF_SESSION_EXPIRATION__WEB=3600
SPXML_CONF_MAX_SESSIONS_COUNT__WEB=3000
SPXML_CONF_MAX_FT_DOCS__WEB=1000
SPXML_CONF_UPGRADE_LOCKED__WEB=true
SPXML_CONF_IN_PLACE_UPGRADE__WEB=true
SPXML_CONF_REDIS_LIMIT_MEMORY_PERCENTAGE__WEB=20
SPXML_CONF_REDIS_LIMIT_MEMORY_MEGABYTES__WEB=
SPXML_CONF_LOCAL_OBJECT_CLIENT_CACHE__WEB=false
SPXML_CONF_LOCAL_OBJECT_CACHE__WEB=false
SPXML_CONF_LOCAL_FILE_CACHE__WEB=false
SPXML_CONF_LUCENE_FT_CACHE__WEB=false
SPXML_CONF_LUCENE_FT_INDEX_RAM_BUFFER_SIZE__WEB=256

SPXML_CONF_STRICT_WEBROLE__WEB=true
SPXML_CONF_STRICT_WORKERROLE__WEB=false
SPXML_CONF_STRICT_ROLE_TYPES__WEB=WebsocketQueue,WebOnly
SPXML_CONF_COMPLEX_HOSTING_BLOCK__WEB=[{'Host':'wt.local','RoleTypes':['WebsocketQueue','WebOnly']}]

# ==== SPXML (WORKER role) ====
SPXML_CONF_SESSION_EXPIRATION__WORKER=3600
SPXML_CONF_MAX_SESSIONS_COUNT__WORKER=500
SPXML_CONF_MAX_FT_DOCS__WORKER=1000
SPXML_CONF_UPGRADE_LOCKED__WORKER=false
SPXML_CONF_IN_PLACE_UPGRADE__WORKER=false
SPXML_CONF_REDIS_LIMIT_MEMORY_PERCENTAGE__WORKER=20
SPXML_CONF_REDIS_LIMIT_MEMORY_MEGABYTES__WORKER=
SPXML_CONF_LOCAL_OBJECT_CLIENT_CACHE__WORKER=false
SPXML_CONF_LOCAL_OBJECT_CACHE__WORKER=false
SPXML_CONF_LOCAL_FILE_CACHE__WORKER=false
SPXML_CONF_LUCENE_FT_CACHE__WORKER=false
SPXML_CONF_LUCENE_FT_INDEX_RAM_BUFFER_SIZE__WORKER=256

SPXML_CONF_STRICT_WEBROLE__WORKER=false
SPXML_CONF_STRICT_WORKERROLE__WORKER=true
SPXML_CONF_STRICT_ROLE_TYPES__WORKER=Agent,Notification,ScriptQueue
SPXML_CONF_COMPLEX_HOSTING_BLOCK__WORKER=[]

###############################################################################
#                           HEALTHCHECK TIMINGS (opt)                         #
###############################################################################
HC_INTERVAL__WEB=10s
HC_TIMEOUT__WEB=5s
HC_START_PERIOD__WEB=90s
HC_RETRIES__WEB=12
HC_INTERVAL__WORKER=10s
HC_TIMEOUT__WORKER=5s
HC_START_PERIOD__WORKER=90s
HC_RETRIES__WORKER=12
HC_INTERVAL__PG=5s
HC_TIMEOUT__PG=10s
HC_RETRIES__PG=10
HC_INTERVAL__REDIS=5s
HC_TIMEOUT__REDIS=3s
HC_RETRIES__REDIS=5
HC_INTERVAL__LOKI=5s
HC_TIMEOUT__LOKI=3s
HC_RETRIES__LOKI=10

###############################################################################
#                    MONITORING / logstash → loki (файлы + S3)                #
###############################################################################
IMAGE_LOGSTASH=docker.elastic.co/logstash/logstash:8.12.2

# Список плагинов, которые обязательно должны быть установлены
LOGSTASH_PLUGINS="logstash-integration-aws logstash-output-http"

# Если нужен доверенный CA MinIO — смонтируй файл (см. compose) и включи флаг:
TRUST_MINIO_CA=false
# Путь внутри контейнера, куда мы монтируем CA (не меняй, совпадает со скриптом)
MINIO_CA_PATH=/secrets/minio-rootCA.crt

# Какие источники включать
LOGSTASH_INPUT_FILES_ENABLED=true    # читать примонтированные каталоги (локально/по ш CIFS/NFS)
LOGSTASH_INPUT_S3_ENABLED=false      # читать из S3/MinIO бакета (включи true, когда понадобится)

# Пути к логам внутри КОНТЕЙНЕРА logstash (мы их монтируем из ./websoft/Logs/*)
# Если каталогов станет больше (например, web-backend-3 или сетевую шару примонтируешь),
# добавляй новые GLOB-паттерны и соответствующие file-input в 00-input-files.conf.
LOGSTASH_FILES_GLOB_WEB1=/var/log/wt/web1/*.log
LOGSTASH_FILES_GLOB_WEB2=/var/log/wt/web2/*.log
LOGSTASH_FILES_GLOB_WORKER=/var/log/wt/worker/*.log

# Мультилайн: новая запись начинается со строки вида "HH:MM:SS [dddd] " (xhttp)
# ВНИМАНИЕ: pattern должен быть строго таким 
LOGSTASH_ML_PATTERN=^\\d{2}:\\d{2}:\\d{2}\\s\\[\\d{4}\\]\\s+
LOGSTASH_ML_NEGATE=true
LOGSTASH_ML_WHAT=previous
LOGSTASH_ML_AUTO_FLUSH=5

# Лейблы/фолбэки — попадут в метки Loki (удобно фильтровать в Grafana)
LOKI_JOB_LABEL=websoft-hcm
ROLE_FALLBACK=unknown_role
ENV_FALLBACK=unknown_env
LOG_TYPE_FALLBACK=unknown_type

# S3/MinIO (нужны только если LOGSTASH_INPUT_S3_ENABLED=true)
S3_SERVICE_URL=https://minio:9000
S3_ACCESS_KEY_ID=
S3_SECRET_ACCESS_KEY=
BUCKET_LOGS=logs
S3_FORCE_PATH_STYLE=true   # для MinIO обязательно true

###############################################################################
#                             MONITORING / loki                               #
###############################################################################
IMAGE_LOKI=grafana/loki:2.9.3
HOST_NAME__LOKI=loki
HOST_PORT__LOKI=3100
# Пароль Loki не используется (auth_disabled), оставлен для совместимости
PASSWORD__LOKI=

# === Retention и глубина поиска ===
# DEV:   48h–72h
# TEST:  168h (7d)
# PROD:  168h–336h (7–14d)
LOKI_RETENTION_PERIOD=72h
# Максимальная давность сообщений, которые Loki будет принимать
# (держи ≥ LOKI_RETENTION_PERIOD). DEV: 72h / TEST: 168h / PROD: 336h
LOKI_REJECT_OLD_SAMPLES_MAX_AGE=168h
# Максимальная глубина поиска (обычно = или > retention)
LOKI_MAX_LOOK_BACK_PERIOD=168h

# === Chunk тайминги (влияют на размер чанков и задержку индексации) ===
# Сколько ждать «тишины» по стриму до закрытия чанка. DEV: 2m–5m / PROD: 5m–10m
LOKI_CHUNK_IDLE_PERIOD=5m
# Принудительное закрытие чанка (даже при непрерывном потоке). DEV: 30m–1h / PROD: 1h–2h
LOKI_MAX_CHUNK_AGE=1h
# Держать закрытый чанк в памяти (для поздних записей). DEV/PROD: 30s–60s
LOKI_CHUNK_RETAIN_PERIOD=30s

###############################################################################
#                             MONITORING / grafana                            #
###############################################################################
IMAGE_GRAFANA=grafana/grafana:10.2.2
HOST_NAME__GRAFANA=grafana
HOST_PORT__GRAFANA=3000
GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=change_me
GF_USERS_ALLOW_SIGN_UP="false"

###############################################################################
#                         OMNICODE / DOTNET ENV                               #
###############################################################################
WEBTUTOR_SERVER_DIR=/WebsoftServer
DEBUG_WEBTUTOR_SERVER_DIR=/WebsoftServer

# У тебя .NET 9, поэтому:
DEFAULT_NETCORE_TARGET_FRAMEWORK=net9.0
DEFAULT_NETSTANDARD_TARGET_FRAMEWORK=netstandard2.1

# путь к SDK внутри контейнера (нужно проверить через dotnet --info!)
WEBSOFT_MSBUILD_SDK_PATH=/usr/share/dotnet/sdk